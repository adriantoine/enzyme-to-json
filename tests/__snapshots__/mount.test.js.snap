// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`accepts a map option allowing to customize content 1`] = `
<strong>
  Goodbye!
</strong>
`;

exports[`accepts a map option allowing to customize content of all nested components 1`] = `
<div
  className="wrapper"
>
  <strong>
    Hello!
  </strong>
  <strong
    className="strong2"
  >
    Hello 2
  </strong>
</div>
`;

exports[`can skip a component I dont want to see with the map option 1`] = `
<div>
  <strong>
    Hello 2
  </strong>
</div>
`;

exports[`converts a class mount with a class component in it as a direct child 1`] = `
<ClassWithDirectComponent
  className="class"
>
  <ClassWithPure
    className="nested-pure"
  >
    <div
      className="class-with-pure nested-pure"
      onClick={[Function]}
    >
      <BasicPure
        className="nested-pure"
      >
        <div
          className="basic-pure nested-pure"
          onClick={[Function]}
        >
          <div
            className="group"
            id="group-id"
          >
            <span>
              <span>
                <span>
                  <strong>
                    Hello!
                  </strong>
                </span>
                <span
                  className="empty"
                />
              </span>
              <span
                className="empty"
              />
            </span>
            <span
              className="empty"
            />
          </div>
        </div>
      </BasicPure>
    </div>
  </ClassWithPure>
</ClassWithDirectComponent>
`;

exports[`converts a class mount with a pure function in it 1`] = `
<ClassWithPure
  className="class"
>
  <div
    className="class-with-pure class"
    onClick={[Function]}
  >
    <BasicPure
      className="nested-pure"
    >
      <div
        className="basic-pure nested-pure"
        onClick={[Function]}
      >
        <div
          className="group"
          id="group-id"
        >
          <span>
            <span>
              <strong>
                Hello!
              </strong>
            </span>
            <span
              className="empty"
            />
          </span>
          <span
            className="empty"
          />
        </div>
      </div>
    </BasicPure>
  </div>
</ClassWithPure>
`;

exports[`converts a class mount with a pure function in it as a direct child 1`] = `
<ClassWithDirectPure
  className="class"
>
  <BasicPure
    className="nested-pure"
  >
    <div
      className="basic-pure nested-pure"
      onClick={[Function]}
    >
      <div
        className="group"
        id="group-id"
      >
        <span>
          <span>
            <strong>
              Hello!
            </strong>
          </span>
          <span
            className="empty"
          />
        </span>
        <span
          className="empty"
        />
      </div>
    </div>
  </BasicPure>
</ClassWithDirectPure>
`;

exports[`converts basic class mount 1`] = `
<BasicClass
  className="class"
>
  <div
    className="basic-class class"
    onClick={[Function]}
  >
    <div
      className="group"
      id="group-id"
    >
      <span>
        <strong>
          Hello!
        </strong>
      </span>
      <span
        className="empty"
      />
    </div>
  </div>
</BasicClass>
`;

exports[`converts basic pure mount 1`] = `
<BasicPure
  className="pure"
>
  <div
    className="basic-pure pure"
    onClick={[Function]}
  >
    <div
      className="group"
      id="group-id"
    >
      <span>
        <strong>
          Hello!
        </strong>
      </span>
      <span
        className="empty"
      />
    </div>
  </div>
</BasicPure>
`;

exports[`converts class components with render returning top level arrays 1`] = `
<ClassArrayRender>
  <div
    className="test"
    key="test"
  >
    Test
  </div>
  <div
    className="test2"
    key="test2"
  >
    Test 2
  </div>
  <div
    className="child"
    key="child"
  >
    <strong>
      Hello!
    </strong>
  </div>
</ClassArrayRender>
`;

exports[`converts class mount with mixed children 1`] = `
<BasicClass>
  <div
    className="basic-class undefined"
    onClick={[Function]}
  >
    <div
      className="group"
      id="group-id"
    >
      <span>
        Hello 
        world
        !
      </span>
      <span
        className="empty"
      />
    </div>
  </div>
</BasicClass>
`;

exports[`converts function components with render returning top level arrays 1`] = `
<ArrayRender>
  <div
    className="test"
    key="test"
  >
    Test
  </div>
  <div
    className="test2"
    key="test2"
  >
    Test 2
  </div>
  <div
    className="child"
    key="child"
  >
    <strong>
      Hello!
    </strong>
  </div>
</ArrayRender>
`;

exports[`converts pure mount with mixed children 1`] = `
<BasicPure>
  <div
    className="basic-pure undefined"
    onClick={[Function]}
  >
    <div
      className="group"
      id="group-id"
    >
      <span>
        Hello 
        world
        !
      </span>
      <span
        className="empty"
      />
    </div>
  </div>
</BasicPure>
`;

exports[`doesnt output the key prop when noKey option is passed 1`] = `
<ul>
  <li />
  <li />
</ul>
`;

exports[`handles a component which returns null 1`] = `<ClassWithNull />`;

exports[`handles elements in prop arrays 1`] = `
<WrapperComponent
  elements={
    Array [
      <BasicPure>
        <strong>
          Hello!
        </strong>
      </BasicPure>,
    ]
  }
>
  <BasicPure
    elements={
      Array [
        <BasicPure>
          <strong>
            Hello!
          </strong>
        </BasicPure>,
      ]
    }
  >
    <div
      className="basic-pure undefined"
      onClick={[Function]}
    >
      <div
        className="group"
        id="group-id"
      >
        <span />
        <span
          className="empty"
        />
      </div>
    </div>
  </BasicPure>
</WrapperComponent>
`;

exports[`handles elements in prop objects 1`] = `
<WrapperComponent
  element={
    Object {
      "element": <BasicPure>
        <strong>
          Hello!
        </strong>
      </BasicPure>,
      "nestedElements": Array [
        <BasicPure>
          <strong>
            Hello again!
          </strong>
        </BasicPure>,
      ],
    }
  }
>
  <BasicPure
    element={
      Object {
        "element": <BasicPure>
          <strong>
            Hello!
          </strong>
        </BasicPure>,
        "nestedElements": Array [
          <BasicPure>
            <strong>
              Hello again!
            </strong>
          </BasicPure>,
        ],
      }
    }
  >
    <div
      className="basic-pure undefined"
      onClick={[Function]}
    >
      <div
        className="group"
        id="group-id"
      >
        <span />
        <span
          className="empty"
        />
      </div>
    </div>
  </BasicPure>
</WrapperComponent>
`;

exports[`outputs an empty string when a component has false chidren 1`] = `
<FalsyChildren
  falsy={false}
>
  <div />
</FalsyChildren>
`;

exports[`outputs an empty string when a component returns false 1`] = `
<FalsyTruthyComponent
  foo={false}
/>
`;

exports[`outputs the key prop 1`] = `
<ul>
  <li
    key="1"
  />
  <li
    key="2"
  />
</ul>
`;

exports[`outputs the snapshot even with inline JSX conditions being falsy 1`] = `
<div>
  <span>
    I am there
  </span>
</div>
`;

exports[`renders a component that has a child fragment 1`] = `
<FragmentAsChild>
  <div>
    <span />
    <div />
    <button />
  </div>
</FragmentAsChild>
`;

exports[`renders a component that has a fragment root 1`] = `
<FragmentAsRoot>
  <span />
  <div />
  <button />
</FragmentAsRoot>
`;

exports[`renders multiple elements as a result of find 1`] = `
Array [
  <li>
    0
  </li>,
  <li>
    1
  </li>,
]
`;

exports[`renders zero-children 1`] = `
<ComponentWithAZeroChildren>
  <div>
    0
  </div>
</ComponentWithAZeroChildren>
`;

exports[`skips undefined props 1`] = `
<BasicWithUndefined>
  <button>
    Hello
  </button>
</BasicWithUndefined>
`;
